diff --git a/cmake/Modules/FindCGAL.cmake b/cmake/Modules/FindCGAL.cmake
index d61765e..c99560d 100644
--- a/cmake/Modules/FindCGAL.cmake
+++ b/cmake/Modules/FindCGAL.cmake
@@ -23,16 +23,6 @@ if( CGAL_LIBRARY )
 	get_filename_component(CGAL_LIBRARY_DIRS ${CGAL_LIBRARY} PATH)
 endif()
 
-if(CGAL_FIND_VERSION)
-    message("CGAL_DIR ${CGAL_DIR}")
-    find_file(version_file version.h HINTS $ENV{CGAL_DIR}/include ${CGAL_DIR}/include ${CGAL_INCLUDE_DIRS} PATH_SUFFIXES CGAL)
-    file(STRINGS ${version_file} version_str REGEX "# *define +CGAL_VERSION +")
-    string( REGEX REPLACE "# *define +CGAL_VERSION +" "" CGAL_VERSION ${version_str})
-    if("${CGAL_VERSION}" VERSION_LESS "${CGAL_FIND_VERSION}")
-        message(FATAL_ERROR "CGAL " ${CGAL_FIND_VERSION} " is required (found " ${CGAL_VERSION} " in ${version_file})" )
-    endif()
-
-endif()
 
 find_library( CGAL_LIBRARY_DEBUG "CGAL${CGAL_LIBRARY_POSTFIX_DEBUG}" ${CGAL_LIBRARY_DEBUG}
 	HINTS ${CGAL_LIBRARY_DIRS}
diff --git a/src/algorithm/connection.cpp b/src/algorithm/connection.cpp
index 0d3906f..f76facf 100644
--- a/src/algorithm/connection.cpp
+++ b/src/algorithm/connection.cpp
@@ -31,6 +31,9 @@
 namespace SFCGAL {
 namespace algorithm {
 
+static const size_t INVALID_INDEX = size_t( -1 ) ; // would use std::numeric_limits< size_t >::max() if it were constant, or SIZE_MAX if it were easier to find.
+
+
 void SurfaceGraph::addRing( const LineString& ring, FaceIndex faceIndex )
 {
     const size_t numSegments = ring.numSegments() ;
@@ -151,7 +154,7 @@ bool isClosed( const SurfaceGraph& graph )
     const SurfaceGraph::EdgeMap::const_iterator end = graph.edgeMap().end() ;
 
     for ( SurfaceGraph::EdgeMap::const_iterator e= graph.edgeMap().begin(); e != end; ++e ) {
-        if ( e->second.second == SurfaceGraph::INVALID_INDEX ) {
+        if ( e->second.second == INVALID_INDEX ) {
             return false;
         }
     }
diff --git a/src/algorithm/connection.h b/src/algorithm/connection.h
index ed9627c..7e2a1ff 100644
--- a/src/algorithm/connection.h
+++ b/src/algorithm/connection.h
@@ -44,7 +44,6 @@ public:
     typedef size_t VertexIndex;
     typedef size_t FaceIndex;
     typedef std::map< Coordinate, VertexIndex >  CoordinateMap ;
-    static const size_t INVALID_INDEX = size_t( -1 ) ; // would use std::numeric_limits< size_t >::max() if it were constant, or SIZE_MAX if it were easier to find.
     // an edge is inserted with vtx ordered by the first polygon we treat,
     // we search the edge with reverse ordered vtx indexes.
     // as a result, an inconsistent orientation between polygons can be spotted by
